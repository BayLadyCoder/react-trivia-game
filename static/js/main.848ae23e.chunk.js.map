{"version":3,"sources":["Categories.js","NewGameForm.js","Helpers.js","GamePlay.js","GameEnd.js","GameStart.js","TriviaGame.js","App.js","serviceWorker.js","index.js"],"names":["Categories","trivia_categories","id","name","NewGameForm","props","state","totalQuestions","category","handleChange","bind","handleSubmit","e","this","setState","target","value","console","log","preventDefault","newGame","create","className","onSubmit","htmlFor","onChange","map","set","key","cat","type","checked","required","Component","defaultProps","decode","string","decodeURIComponent","randomEmoji","arr","Math","floor","random","length","fixString","data","eachQ","d","q","question","ca","correct_answer","ica","incorrect_answers","ia","push","decoded","ready","GamePlay","curQNum","curQ","corA","curA","didAnswer","chosenAnswer","totalQ","disabled","score","handleNext","getData","newData","correctAnswer","incorrectAnswers","shuffleAnswers","array","temporaryValue","currentIndex","randomIndex","shuffle","gameScore","gameIsDone","corEmo","emoji","correct","incorEmo","incorrect","currentQuestion","nextButton","onClick","a","style","color","GameEnd","GameStart","catName","isDone","catId","url","axios","get","res","results","newGameBtn","curQuestion","curAnswers","TriviaGame","player","curScore","startNewGame","handleNewGame","game","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.848ae23e.chunk.js","sourcesContent":["const Categories = {\n  trivia_categories: [\n    { id: 9, name: \"General Knowledge\" },\n    { id: 10, name: \"Books\" },\n    { id: 12, name: \"Music\" },\n    { id: 18, name: \"Science: Computers\" },\n    { id: 21, name: \"Sports\" },\n    { id: 23, name: \"History\" },\n    { id: 26, name: \"Celebrities\" },\n    { id: 27, name: \"Animals\" }\n  ]\n};\n\nexport default Categories;\n","import React, { Component } from \"react\";\nimport Categories from \"./Categories\";\nimport \"./css/NewGameForm.css\";\n\n// This class is a form to get user input (total questions and category) to start the game\nexport class NewGameForm extends Component {\n  static defaultProps = Categories;\n  constructor(props) {\n    super(props);\n    this.state = {\n      totalQuestions: \"5\",\n      category: \"\",\n      id: \"\",\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  // Handle user inputs (total questions and a category) SELECT OPTIONS and RADIO BUTTONS\n  handleChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n    e.target.name === \"category\"\n      ? this.setState({ id: e.target.id })\n      : console.log(e.target.value);\n  }\n\n  // Send user input data to TriviaGame Component (parent)\n  // to create a new game through CREATE FUNCTION\n  // and also reset some state\n  handleSubmit(e) {\n    e.preventDefault();\n    const newGame = this.state;\n    this.props.create(newGame);\n    this.setState({ totalQuestions: \"5\", category: \"\", id: \"\" });\n  }\n\n  render() {\n    const totalQuestionSet = [5, 10, 15, 20, 25, 30];\n\n    return (\n      <div className=\"NewGameForm\">\n        <form onSubmit={this.handleSubmit} className=\"NewGameForm-form\">\n          <div className=\"NewGameForm-totalQuestions\">\n            <label\n              htmlFor=\"totalQuestions\"\n              id=\"totalQuestionsLabel\"\n              className=\"ask\"\n            >\n              How many questions do you want to play?\n            </label>\n            <select\n              onChange={this.handleChange}\n              name=\"totalQuestions\"\n              id=\"totalQuestions\"\n              value={this.state.totalQuestions}\n            >\n              {totalQuestionSet.map((set) => (\n                <option value={set} key={set}>\n                  {set}\n                </option>\n              ))}\n            </select>\n          </div>\n          <p className=\"ask\">Choose a category</p>\n          <div className=\"NewGameForm-categories\">\n            {this.props.trivia_categories.map((cat) => (\n              <label key={cat.name} className=\"NewGameForm-category\">\n                <input\n                  className=\"NewGameForm-input-radio\"\n                  type=\"radio\"\n                  onChange={this.handleChange}\n                  value={cat.name}\n                  name=\"category\"\n                  checked={this.state.category === cat.name ? true : false}\n                  key={cat.name}\n                  id={cat.id}\n                  required={true}\n                />\n                {cat.name}\n              </label>\n            ))}\n          </div>\n          <button className=\"btn-startgame\">Start Game &#10154;</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default NewGameForm;\n","// To  decode String URLs\nfunction decode(string) {\n  const newString = decodeURIComponent(string);\n  return newString;\n}\n\n// Select, decode, and organize the (only) data that we need from API request\nfunction fixString(data) {\n  let eachQ = [];\n\n  data.map(d => {\n    const q = decode(d.question);\n    const ca = decode(d.correct_answer);\n    const ica = d.incorrect_answers.map(ia => decode(ia));\n\n    eachQ.push([q, ca, ica]);\n  });\n\n  const decoded = {\n    ready: eachQ\n  };\n  console.log(\"decoded\", decoded);\n  return decoded;\n}\n\n// To Shuffle array to make all answers order randomly\n// Return a shuffled array\nfunction shuffle(array) {\n  let currentIndex = array.length;\n  let temporaryValue;\n\n  while (0 !== currentIndex) {\n    const randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\n// Return a random element from an array\n// (this function only use for emoji array in this program)\nfunction randomEmoji(arr) {\n  const randIndex = Math.floor(Math.random() * arr.length);\n  const emoji = arr[randIndex];\n  return emoji;\n}\n\nexport default fixString;\n\nexport { shuffle, randomEmoji };\n","import React, { Component } from \"react\";\nimport \"./css/GamePlay.css\";\nimport { shuffle, randomEmoji } from \"./Helpers\";\n\n// This Component run the game by displaying each question and its answers\n// also showing the chosen Category and current player's Score\nexport class GamePlay extends Component {\n  static defaultProps = {\n    emoji: {\n      correct: [\"😃\", \"😄\", \"😇\", \"😍\", \"😊\", \"🤩\", \"😎\", \"🤓\"],\n      incorrect: [\"😢\", \"😰\", \"😫\", \"😓\", \"🙄\", \"🤢\", \"😮\", \"😮\"]\n    }\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      curQNum: 0,\n      curQ: this.props.curQ,\n      corA: this.props.corA,\n      curA: this.props.curA,\n      value: null,\n      didAnswer: false,\n      chosenAnswer: null,\n      totalQ: this.props.totalQ,\n      disabled: false,\n      ready: this.props.ready,\n      score: 0\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleNext = this.handleNext.bind(this);\n    this.getData = this.getData.bind(this);\n  }\n\n  // Handle when user is choosing a choice from RADIO BUTTON\n  handleChange(e) {\n    this.setState({ value: e.target.value });\n  }\n\n  // Handle when user click ANSWER BUTTON\n  handleSubmit(e) {\n    e.preventDefault();\n    if (this.state.value !== null) {\n      this.setState({\n        didAnswer: true,\n        chosenAnswer: this.state.value,\n        disabled: true\n      });\n      if (this.state.value === this.state.corA) {\n        this.setState({ score: this.state.score + 1 });\n      }\n\n      this.setState({ value: null });\n    }\n  }\n\n  // Get first question and answers before the component mounts\n  componentWillMount() {\n    const data = this.state.ready;\n    const curQNum = this.state.curQNum;\n    this.getData(data, curQNum);\n  }\n\n  // Function for getting current question and answers to render\n  getData(data, curQNum) {\n    this.setState({ curQNum: this.state.curQNum + 1 });\n    const newData = data[curQNum];\n    const question = newData[0];\n    const correctAnswer = newData[1];\n    const incorrectAnswers = newData[2];\n    const allAnswers = [correctAnswer, ...incorrectAnswers];\n    const shuffleAnswers = shuffle(allAnswers);\n    this.setState({\n      curQ: question,\n      corA: correctAnswer,\n      curA: shuffleAnswers\n    });\n  }\n\n  // Get the next question and answers when user click NEXT BUTTON\n  // and reset some state\n  handleNext() {\n    const data = this.state.ready;\n    const curQNum = this.state.curQNum;\n    if (curQNum < this.props.totalQ) {\n      this.getData(data, curQNum);\n      this.setState({\n        chosenAnswer: false,\n        didAnswer: false,\n        disabled: false\n      });\n    } else {\n      this.props.gameScore(this.state.score);\n      this.props.gameIsDone();\n    }\n  }\n\n  render() {\n    const corEmo = randomEmoji(this.props.emoji.correct); // Random Emoji for Correct Answer\n    const incorEmo = randomEmoji(this.props.emoji.incorrect); // Random Emoji for Incorrect Answer\n    const currentQuestion = this.state.curQ;\n    const nextButton = (\n      <button className=\"GamePlay-game-btnNext\" onClick={this.handleNext}>\n        NEXT &#10095;\n      </button>\n    );\n\n    const correctColor = { color: \"#00ed00\" };\n    return (\n      <div className=\"GamePlay\">\n        <div className=\"GamePlay-scoreboard\">\n          <p>\n            Question {this.state.curQNum}/{this.props.totalQ}\n          </p>\n          <p>Score {this.state.score}</p>\n        </div>\n\n        <div className=\"GamePlay-gameContainer\">\n          <p className=\"GamePlay-question\">\n            <strong>{currentQuestion}</strong>\n          </p>\n          <div className=\"GamePlay-game center\">\n            <div className=\"GamePlay-game-answers\">\n              {this.state.curA.map(a => (\n                <form key={a}>\n                  <label\n                    key={a}\n                    className={this.state.value === a ? \"checked\" : \"unchecked\"}\n                  >\n                    <input\n                      type=\"radio\"\n                      onChange={this.handleChange}\n                      value={a}\n                      name={this.state.curQNum}\n                      checked={this.state.value === a ? true : false}\n                      key={a}\n                      id={a}\n                      disabled={this.state.disabled}\n                      required={true}\n                    />\n                    {a}\n                  </label>\n                </form>\n              ))}\n            </div>\n            <div className=\"GamePlay-game-button\">\n              {this.state.didAnswer ? (\n                this.state.chosenAnswer === this.state.corA ? (\n                  <div className=\"GamePlay-game-button \">\n                    <p className=\"mb-5 mt-0 reveal-answer correct\">\n                      <strong style={correctColor}>\n                        &#10003; {this.state.chosenAnswer}\n                      </strong>{\" \"}\n                      is Correct {corEmo}\n                    </p>\n                    {nextButton}\n                  </div>\n                ) : (\n                  <div className=\"GamePlay-game-button \">\n                    <div className=\"center\">\n                      <p className=\"mb-5 mt-0 reveal-answer incorrect\">\n                        <strong>&#10008; {this.state.chosenAnswer}</strong> is\n                        incorrect. {incorEmo}\n                      </p>\n                      <p className=\"mb-5 mt-0 reveal-answer answer\">\n                        The Answer is <strong>{this.state.corA}</strong>\n                      </p>\n                    </div>\n                    {nextButton}\n                  </div>\n                )\n              ) : (\n                <button\n                  className=\"GamePlay-game-button GamePlay-game-btnAnswer\"\n                  onClick={this.handleSubmit}\n                >\n                  Answer\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GamePlay;\n","import React, { Component } from \"react\";\nimport \"./css/GameEnd.css\";\n\n// This Component shows the Summary at the end of the game\n// For examples, the chosen Category, the total Questions, and the final Score\nexport class GameEnd extends Component {\n  render() {\n    return (\n      <div className=\"GameEnd\">\n        <button id=\"GameEnd-btn\" onClick={this.props.newGame}>\n          New Game\n        </button>\n        <div className=\"GameEnd-text\">\n          <strong>Category:</strong> {this.props.category}\n        </div>\n        <div className=\"GameEnd-text\">\n          <strong>Total Questions:</strong> {this.props.totalQ}\n        </div>\n        <div className=\"GameEnd-text\">\n          <strong>Your Score:</strong> {this.props.score} / {this.props.totalQ}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GameEnd;\n","import React, { Component } from \"react\";\nimport \"./css/GameStart.css\";\nimport axios from \"axios\";\nimport fixString from \"./Helpers.js\";\nimport GamePlay from \"./GamePlay\";\nimport GameEnd from \"./GameEnd\";\n\n// Once we get the user input from NewGameForm Component this Component will be rendered\n// This class is the class that fetch data from API and pass data to GamePlay\n// It also decides if it's going to render GamePlay (display questions) or GameEnd (display summary) components\nexport class GameStart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: \"\",\n      ready: false,\n      totalQ: this.props.totalQ,\n      category: this.props.catName,\n      isDone: false,\n      gameScore: 0\n    };\n    this.gameIsDone = this.gameIsDone.bind(this);\n    this.gameScore = this.gameScore.bind(this);\n  }\n\n  // Fetching data from API, then decode the String URLs\n  async componentDidMount() {\n    const totalQ = this.props.totalQ;\n    const catId = this.props.catId;\n    const base_url = \"https://opentdb.com/api.php?\";\n    const url = base_url + `amount=${totalQ}&category=${catId}&encode=url3986`;\n    const res = await axios.get(url);\n\n    const data = res.data.results;\n    this.setState({ data: data });\n\n    const decoded = fixString(this.state.data);\n    this.setState({ ready: decoded.ready });\n  }\n\n  // GamePlay will invoke this function once it runs all the questions\n  // When game is done is True, it will render GameEnd Component\n  gameIsDone() {\n    this.setState({ isDone: true });\n  }\n\n  // GamePlay will invoke this function and pass the final score through this function when game is done,\n  // then this Component will pass the last score to GameEnd Component to render\n  gameScore(score) {\n    this.setState({ gameScore: score });\n  }\n\n  render() {\n    const ready = this.state.ready ? this.state.ready : \"not ready\";\n    const totalQ = this.state.totalQ;\n    const category = this.state.category;\n    return (\n      <div className=\"GameStart\">\n        {!this.state.isDone ? (\n          this.state.ready ? (\n            <div>\n              <GamePlay\n                curQ={this.state.curQuestion}\n                curA={this.state.curAnswers}\n                corA={this.state.correctAnswer}\n                totalQ={totalQ}\n                ready={ready}\n                gameIsDone={this.gameIsDone}\n                gameScore={this.gameScore}\n              />\n            </div>\n          ) : (\n            <div className=\"GameStart-loading\">Loading...</div>\n          )\n        ) : (\n          <GameEnd\n            totalQ={totalQ}\n            category={category}\n            score={this.state.gameScore}\n            newGame={this.props.newGameBtn}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default GameStart;\n","import React, { Component } from \"react\";\nimport \"./css/TriviaGame.css\";\nimport NewGameForm from \"./NewGameForm\";\nimport GameStart from \"./GameStart\";\n\n// This class decides if it's going to render\n// NewGameForm(get user input) or GameStart(start the game) components\nexport class TriviaGame extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newGame: { totalQuestions: 5, category: \"\", id: false },\n      player: { curQuestion: 1, curScore: 0 },\n      data: \"\",\n      ready: false,\n      startNewGame: false\n    };\n    this.create = this.create.bind(this);\n    this.handleNewGame = this.handleNewGame.bind(this);\n  }\n\n  // NewGameForm will invoke this function once it gets all information needed to create a new game\n  create(newGame) {\n    this.setState({ newGame: \"\", startNewGame: false });\n    this.setState({ newGame: newGame, ready: true });\n  }\n\n  // This function is invoked after user click NEW GAME BUTTON in GameEnd Component\n  handleNewGame() {\n    this.setState({ newGame: { totalQuestions: 5, category: \"\", id: false } });\n    this.setState({ startNewGame: true });\n  }\n\n  render() {\n    const totalQ = this.state.newGame.totalQuestions;\n    const id = this.state.newGame.id;\n    const catName = this.state.newGame.category;\n\n    const game =\n      !this.state.ready || this.state.startNewGame ? (\n        <NewGameForm create={this.create} />\n      ) : (\n        <GameStart\n          totalQ={totalQ}\n          catId={id}\n          catName={catName}\n          newGameBtn={this.handleNewGame}\n        />\n      );\n\n    return (\n      <div className=\"TriviaGame\">\n        <h1>Trivia Game</h1>\n\n        {game}\n      </div>\n    );\n  }\n}\n\nexport default TriviaGame;\n","import React from \"react\";\nimport TriviaGame from \"./TriviaGame\";\n\nimport \"./css/App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TriviaGame />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}